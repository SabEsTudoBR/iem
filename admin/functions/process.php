<?php
/**
 * This file provides licensing "process"
 *
 * @package interspire.iem
 */
class LICENSE
{
	/**
	 * License variables (See Decrypt for more information)
	 * @var array License variables
	 */
	private $_license_variables = array();

	/**
	 * Hold the error string generated by the license
	 * @var boolean|string Holds FALSE if no error, TRUE or string otherwise
	 */
	private $_error = false;




	/**
	 * MAGIC: Overload several object calls
	 * @return unknown_type
	 */
	public function __call($name, $arguments)
	{
		switch ($name) {
			// Get edition MD5 code
			case 'GetEdition':
				return self::issetfor($this->_license_variables['edition'], '');
			break;

			// Get the number of user this license allow
			// 0 = unlimited, other number indicates how many the license allow
			case 'GetUsers':
				return self::issetfor($this->_license_variables['users'], 0);
			break;

			// Get MD5 hash of the domain that this license allow
			case 'GetDomain':
				return self::issetfor($this->_license_variables['domain'], '');
			break;

			// Get the expiry date of the license (mm.dd.yyyy)
			case 'GetExpires':
				return self::issetfor($this->_license_variables['expires'], '01.01.2000');
			break;

			// Get the number of lists this license allow
			case 'GetLists':
				return self::issetfor($this->_license_variables['lists'], 0);
			break;

			// Get the number of subscribers this license allow
			case 'GetSubscribers':
				return self::issetfor($this->_license_variables['subscribers'], 0);
			break;

			// Get the version number of this license
			case 'GetVersion':
				return self::issetfor($this->_license_variables['version'], '');
			break;

			// Whether or not license is an NFR
			case 'GetNFR':
				return self::issetfor($this->_license_variables['nfr'], true);
			break;

			// ID associated with an agency (empty means NON-AGENCY)
			case 'GetAgencyID':
				return self::issetfor($this->_license_variables['agencyid'], 0);
			break;

			// How many trial account does the license allow (License need to be agency edition)
			// 0 = unlimited, other number indicates how many the license allow
			case 'GetTrialAccountLimit':
				return self::issetfor($this->_license_variables['trialaccount'], 0);
			break;

			// How many emails can a trial account send out (License need to be agency edition)
			// 0 = Not available, other number indicates how many the license allow
			case 'GetTrialAccountEmail':
				return self::issetfor($this->_license_variables['trialemail'], 0);
			break;

			// How long does a trial account last for (License need to be agency edition)
			// 0 = Not available, other number indicates how many the license allow
			case 'GetTrialAccountDays':
				return self::issetfor($this->_license_variables['trialdays'], 0);
			break;

			// How many days before the application needs to pingback to our server
			// -1 = No need to pingback, <=0 (except for -1) = Will disable the application stright away,
			// Other numbers means the number of days to wait
			case 'GetPingbackDays':
				return self::issetfor($this->_license_variables['pingbackdays'], -1);
			break;

			// How many days before the application gets deactivated when pingback failed
			// <=0 = Deactivate right away, >0<10 = Is the days to wait (Maximum days to wait is 10)
			case 'GetPingbackGrace':
				return self::issetfor($this->_license_variables['pingbackgrace'], 0);
			break;

			// No value for this
			default:
				return false;
			break;
		}
	}




	/**
	 * GetError
	 * Retrurns error string
	 * @return boolean|string Returns FALSE if there is no error, TRUE or an error description otherwise
	 */
	public function GetError()
	{
		return $this->_error;
	}

	/**
	 * DecryptKey
	 * Decrypt license key
	 *
	 * This method will decrypt the license key...
	 * Since this is built on top of an older IEM licensing, the license key needs to be backwards compatible.
	 * (ie. IEM 5.5.x license key key needs to be able to work in IEM 5.0.x).
	 *
	 * @param String $Key Key to be decrypted
	 *
	 * @todo moved licensing procedure inside IEM class
	 */
	public function DecryptKey($Key)
	{
		if (substr($Key, 0, 4) != 'IEM-') {
			$this->_error = true;
			return;
		}

		$key = @base64_decode(str_replace('IEM-', '', $Key));
		if (substr_count($key, '-') !== 7) {
			$this->_error = true;
			return;
		}

		$status = !!preg_match('/^(.*?)\:([\da-f]+)$/s', $key, $matches);
		if (!$status || count($matches) != 3) {
			$this->_error = true;
			return;
		}

		$key = $matches[1];
		if (dechex(doubleval(sprintf('%u', crc32($key . ':')))) != $matches[2]) {
			$this->_error = true;
			return;
		}

		list($host, $edition, $expiry_date, $version_encoded, $users, $lists, $subscribers, $payload) = explode('-', $key);

		$version_decoded = '5.0';
		if (preg_match('/^v<(.*)>$/', $version_encoded, $matches)) {
			$location = doubleval(hexdec($host{30})) % 8;
			$length = $matches[1]{$location};
			$version_decoded = substr($matches[1], $location + 1, $length);
			$version_decoded = str_replace('a', '.', $version_decoded);
		}

		// Do not continue if license key version is lower than 5.7
		if (version_compare('5.7', $version_decoded) == 1) {
			$this->_error = true;
			return;
		}

		// Make provision for older license key
		// Where older licensing schema uses md5 string of "edition"
		// to be compared against string in the application,
		// while the newer "edition" will simply print out text to the title
		if (in_array($edition, array(
				'1e23852820b9154316c7c06e2b7ba051',
				'cc37ece0f85fb36ba4fce2e0cca5bcc6',
				'9e3360ac711fcd82ceea74c8eb69bda9',
				'df1d2da60ee3adf14bfdedbbfcb69c53',
				'4d4afda25a3f52041ee1b569157130b8',
				'9f4cd052225c16c3545c271c071b1b73',
				'NORMAL'))) {
			$edition = '';

		// With other edition we will need to
		// transform them with the correct casing
		// so it will look nice
		} else {
			$edition = ucwords(strtolower($edition));
		}

		// ----------------------------------------------------------------------
		// Payload will contains a string of following values
		// depending on the version (separated by a colon ie. :):
		// - NFR flag
		// - Agency ID (number that will is assigned on our database
		// - Number of Trial Account
		// - Number of email a trial account can have
		// - The number of days a trial account will expire
		// - The number of days the application need to pingback to keep it "Active"
		// - The number of days to give the application before it is deactivated when pingback wasn't successful
		// ----------------------------------------------------------------------
		if (substr_count($payload, ':') < 6) {
			$this->_error = true;
			return;
		}

		list ($nfr_encoded, $agency_id, $trial_account, $trial_email, $trial_days, $pingbackdays, $pingbackgrace) = explode(':', $payload);

		$nfr_decoded = (!preg_match('/^' . $host{10} . '\n#/', $nfr_encoded));
		$agency_id = trim($agency_id);
		$trial_account = (empty($agency_id) ? 0 : intval($trial_account));



		$this->_license_variables = array(
			// The number of users this license allow
			'users'			=> intval($users),

			// How many lists does the license allow
			'lists'			=> intval($lists),

			// How many subscribers does the license allow
			'subscribers'	=> intval($subscribers),

			// MD5 domain hash attached to the license
			'domain'		=> $host,

			// Hold the time that license expire (mm.dd.yyyy)
			'expires'		=> $expiry_date,

			// License edition (MD5 hash of the edition)
			'edition'		=> $edition,

			// License version
			'version'		=> $version_decoded,

			// License NFR flag... TRUE if this is an NFR license, FALSE otherwise
			'nfr'			=> $nfr_decoded,

			// ID associated with an agency (empty means NON-AGENCY)
			'agencyid'		=> $agency_id,

			// How many trial account does the license allow (License need to be agency edition)
			// 0 = Not available, TRUE = unlimited, other number indicates how many the license allow
			'trialaccount'	=> intval($trial_account),

			// How many emails can a trial account send out (License need to be agency edition)
			// 0 = Not available, TRUE = unlimited, other number indicates how many the license allow
			'trialemail'	=> intval($trial_email),

			// How long does a trial account last for (License need to be agency edition)
			// 0 = Not available, TRUE = unlimited, other number indicates how many the license allow
			'trialdays'		=> intval($trial_days),

			// How many days before the application needs to pingback to our server
			// -1 = No need to pingback, <=0 (except for -1) = Will disable the application stright away,
			// Other numbers means the number of days to wait
			'pingbackdays'	=> intval($pingbackdays) - 1000,

			// How many days before the application gets deactivated when pingback failed
			// <=0 = Deactivate right away, >0<10 = Is the days to wait (Maximum days to wait is 10)
			'pingbackgrace'	=> intval($pingbackgrace)
		);
	}

	/**
	 * An alias of isset? ___ : ____
	 */
	static private function issetfor(&$variable, $default = false)
	{
		return isset($variable) ? $variable : $default;
	}
}

/**
 * Check whether or not the application is able to add more user
 * This function is used in the API side.
 *
 * @param User_API $user New user to be created
 * @return boolean Returns TRUE if the operation can proceed, FALSE otherwise
 */
function ss9024kwehbehb(User_API &$user)
{
	ss9O24kwehbehb();
	if (!constant('IEM_SYSTEM_ACTIVE')) {
		return false;
	}

	if ($user->trialuser == '1') {
		$agency_variables = get_agency_license_variables();

		$user->admintype = 'c';
		
		if ($user->group->limit_totalemailslimit > $agency_variables['trial_email_limit']) {
			$user->group->limit_totalemailslimit = (int) $agency_variables['trial_email_limit'];
		}
		
		$user->group->limit_emailspermonth = 0;

		if (array_key_exists('system', $user->permissions)) {
			unset($user->permissions['system']);
		}
	}

	// If it is an existing user, do not worry about checking
	if (!empty($user->userid)) {
		return true;
	}

	$available_user = get_available_user_count();

	if ($user->trialuser == '1' && ($available_user['trial'] === true || $available_user['trial'] > 0)) {
		return true;
	} elseif ($user->trialuser != '1' && ($available_user['normal'] === true || $available_user['normal'] > 0)) {
		return true;
	}

	return false;
}

/**
 * Get variables specifically for "Agency Edition"
 * @return array Return an array of variables used by "Agency Edition"
 */
function get_agency_license_variables()
{
	$lice = ss02k31nnb(constant('SENDSTUDIO_LICENSEKEY'));
	if (!$lice) {
		return array(
			'agencyid'			=> 0,
			'trial_account'		=> 0,
			'trial_email_limit'	=> 0,
			'trial_days'		=> 0
		);
	}

	return array(
		'agencyid'			=> $lice->GetAgencyID(),
		'trial_account'		=> $lice->GetTrialAccountLimit(),
		'trial_email_limit'	=> $lice->GetTrialAccountEmail(),
		'trial_days'		=> $lice->GetTrialAccountDays()
	);
}

/**
 * Get the number of available users that the system can create
 *
 * @return array Return an array of available users (with the user type as its key
 */
function get_available_user_count()
{
	$available_users = array('normal' => 0, 'trial' => 0);

	$lice = ss02k31nnb(constant('SENDSTUDIO_LICENSEKEY'));
	if (!$lice) {
		return $available_users;
	}

	$current_users = get_current_user_count();

	$command_get_user = 'GetUsers';
	$command_get_trial_user = 'GetTrialAccountLimit';

	$allowed_normal_users = $lice->{$command_get_user}();
	if ($allowed_normal_users === 0) {
		$available_users['normal'] = true;
	} else {
		$available_users['normal'] = $allowed_normal_users - $current_users['normal'];
	}

	$agencyid = $lice->GetAgencyID();
	if (!empty($agencyid)) {
		$allowed_trial_users = $lice->{$command_get_trial_user}();
		if ($allowed_trial_users === 0) {
			$available_users['trial'] = true;
		} else {
			$available_users['trial'] = $allowed_trial_users - $current_users['trial'];
		}
	}

	// If they exceeded either one of their license, then restrict both user type
	if ($available_users['normal'] < 0 || $available_users['trial'] < 0) {
		$available_users = array('normal' => 0, 'trial' => 0);
	}

	return $available_users;
}

/**
 * Get current user count
 * @return array
 */
function get_current_user_count()
{
	$db = IEM::getDatabase();
	$rs = $db->Query("SELECT COUNT(1) AS count, trialuser FROM [|PREFIX|]users GROUP BY trialuser");
	if (!$rs) {
		return false;
	}

	$current_users = array('trial' => 0, 'normal' => 0);

	while ($row = $db->Fetch($rs)) {
		if ($row['trialuser'] == '1') {
			$current_users['trial'] += intval($row['count']);
		} else {
			$current_users['normal'] += intval($row['count']);
		}
	}

	$db->FreeResult($rs);

	return $current_users;
}

/**
 * Check whether or not the application is able to add more user
 * This function is used in the FUNCTION side.
 *
 * This function produces a string that can be printed out to the browser
 * be it a javascript or a message string.
 *
 * NOTE: This function returns an array with the following structure:
 * - status (boolean) => Whether or not installation is able to support more user.
 * - message (string) => Message string to be outputted to the browser.
 *
 * NOTE: If the function simply returns a FALSE, that means the application IS NOT
 * allowed to add more user (without any explaination).
 *
 * @return array|FALSE Returns an array with "STATUS" and "MESSAGE" string.
 */
function ssk23twgezm2()
{
	ss9O24kwehbehb();

	$lice = ss02k31nnb(constant('SENDSTUDIO_LICENSEKEY'));
	if (!$lice) {
		return false;
	}

	$agencyid = $lice->GetAgencyID();
	$allowed_normal_users = $lice->GetUsers();
	$allowed_trial_users = (empty($agencyid) ? 0 : $lice->GetTrialAccountLimit());
	$normal_users_count = 0;
	$trial_users_count = 0;
	$available_normal_user = 0;
	$available_trial_user = 0;

	$db = IEM::getDatabase();

	$return = array(
		'status' => false,
		'message' => false
	);

	$rs = $db->Query("SELECT COUNT(1) AS count, trialuser FROM [|PREFIX|]users GROUP BY trialuser");
	if (!$rs) {
		$rs = $db->Query("SELECT COUNT(1) AS count, 0 AS trialuser FROM [|PREFIX|]users");
		if (!$rs) {
			return false;
		}
	}

	while ($row = $db->Fetch($rs)) {
		if ($row['trialuser']) {
			$trial_users_count += intval($row['count']);
		} else {
			$normal_users_count += intval($row['count']);
		}
	}

	$db->FreeResult($rs);


	if ($allowed_normal_users === 0) {
		$available_normal_user = true;
	} else {
		$available_normal_user = $allowed_normal_users - $normal_users_count;
	}

	if ($allowed_trial_users === 0) {
		$available_trial_user = true;
	} else {
		$available_trial_user = $allowed_trial_users - $trial_users_count;
	}


	// Oversubscribed, do not allow them to add any users to the system at all.
	if ($available_normal_user < 0 || $available_trial_user < 0) {
		$return['message'] = GetLang('UserLimitReached', 'You have reached your maximum number of users and cannot create any more.');
		return $return;
	}

	// Cannot create both "normal account" and "trial account"
	if ($available_normal_user == 0 && $available_trial_user == 0) {
		$return['message'] = GetLang('UserLimitReached', 'You have reached your maximum number of users and cannot create any more.');
		return $return;
	}

	/*
	 * Count the number of admin users.
	 * 
	 * @todo This should be abstarcted to a model but to stay consistent with
	 *       the convention of writing poor code, we'll just keep it here.
	 */
	$admin_user = $db->FetchOne("
		SELECT 
			COUNT(u.userid) AS count 
		FROM 
			[|PREFIX|]users      AS u,
			[|PREFIX|]usergroups AS ug
		WHERE 
			ug.systemadmin = 1          AND
			u .groupid     = ug.groupid
	", 'count');
	if ($admin_user === false) {
		return false;
	}

	// Installation is still able to create either "normal" and/or "trial" account
	$return['status'] = true;
	$return['message'] = '<script>$(function(){$("#createAccountButton").attr("disabled",false)});</script>';

	// If the license key is NOT for agency edition, do not display "Agency Edition" specific message.
	if (empty($agencyid)) {
		$langvar = 'CurrentUserReport';
		$langvar_default = 'Current assigned user accounts: %s&nbsp;/&nbsp;admin accounts: %s&nbsp;(Your license key allows you to create %s more account)';

		// Allows to create unlimited accounts
		if ($available_normal_user === true) {
			$langvar .= '_Unlimited';
			$langvar_default = 'Current assigned user accounts: %s&nbsp;/&nbsp;admin accounts: %s&nbsp;(Your license key allows you to create unlimited accounts)';

		// Only allows to create one more account
		} elseif ($available_normal_user != 1) {
			$langvar .= '_Multiple';
			$langvar_default = 'Current assigned user accounts: %s&nbsp;/&nbsp;admin accounts: %s&nbsp;(Your license key allows you to create %s more accounts)';
		}

		$return['message'] .= sprintf(GetLang($langvar, $langvar_default), ($normal_users_count - $admin_user), $admin_user, $available_normal_user);

		return $return;
	}

	$temp = GetLang('AgencyCurrentUserReport', 'Admin accounts: <strong style="font-size:14px;">%s</strong>&nbsp;/&nbsp;Regular accounts: <strong style="font-size:14px;">%s</strong>&nbsp;/&nbsp;Trial accounts: <strong style="font-size:14px;">%s</strong>&nbsp;&#151;&nbsp;');
	$return['message'] .= sprintf($temp, $admin_user, ($normal_users_count -  $admin_user), $trial_users_count);

	// Unlimited normal and trial users
	if ($available_normal_user === true && $available_trial_user === true) {
		$return['message'] .= GetLang('AgencyCurrentUserReport_CreateNormalUnlimited', 'Your license key allows you to create unlimited regular and trial users');

	// Unlimited normal, finite trial users
	} elseif ($available_normal_user === true && $available_trial_user > 0) {
		$temp = GetLang('AgencyCurrentUserReport_CreateUnlimitedNormalFiniteTrial', 'Your license key allows you to create unlimited regular accounts and %s more trial account(s)');
		$return['message'] .= sprintf($temp, $available_trial_user);

	// Finite normal user, unlimited trial users
	} elseif ($available_normal_user > 0 && $available_trial_user === true) {
		$temp = GetLang('AgencyCurrentUserReport_CreateFiniteNormalUnlimitedTrial', 'Your license key allows you to create %s more regular account(s) and unlimited trial account(s)');
		$return['message'] .= sprintf($temp, $available_normal_user);

	// You can create both finite "normal" and "trial" user
	} elseif ($available_normal_user > 0 && $available_trial_user > 0) {
		$temp = GetLang('AgencyCurrentUserReport_CreateNormalAndTrial', 'Your license key allows you to create %s more regular account(s) and %s more trial account(s)');
		$return['message'] .= sprintf($temp, $available_normal_user, $available_trial_user);

	// You can only create "normal" user
	} elseif ($available_normal_user > 0) {
		$temp = GetLang('AgencyCurrentUserReport_NormalOnly', '&nbsp;&#151;&nbsp;Your license only allows you to create %s more regular account(s)');
		$return['message'] .= sprintf($temp, $available_normal_user);

	// You can only create "trial" user
	} else {
		$temp = GetLang('AgencyCurrentUserReport_TrialOnly', '&nbsp;&#151;&nbsp;Your license only allows you to create %s more trial account(s)');
		$return['message'] .= sprintf($temp, $available_trial_user);
	}

	return $return;
}

/**
 * Check if license key is valid
 *
 * This function will check the following:
 * - License key is still valid
 * - License key is for the correct domain
 * - License key is not expired
 *
 * @param string $LicenseKey License key
 * @return Array Returns an array
 */
function sesion_start($LicenseKey = false)
{
	if (!defined('SENDSTUDIO_IS_SETUP') || !SENDSTUDIO_IS_SETUP) {
		return array(false, '');
	}

	if (!$LicenseKey) {
		$LicenseKey = SENDSTUDIO_LICENSEKEY;
	}
	$lice = ss02k31nnb($LicenseKey);

	if (!$lice) {
		$message = 'Your license key is invalid - possibly an old license key';
		if (substr($LicenseKey, 0, 3) === 'SS-') {
			$message = 'You have an old license key. Please log in to the <a href="http://www.interspire.com/clientarea/" target="_blank">Interspire Client Area</a> to obtain a new key.';
		}
		return array(true, $message);
	}

	// If the license key version is lower than 5.7, instruct the user to obtain a new key.
	if (version_compare('5.7', $lice->GetVersion()) == 1) {
		return array(true, 'You have an old license key. Please log in to the <a href="http://www.interspire.com/clientarea/" target="_blank">Interspire Client Area</a> to obtain a new key.');
	}

	$domain = $lice->GetDomain();
	$my_domain = $_SERVER['HTTP_HOST'];
	$domain_with_www = (strpos($my_domain, 'www.') === false) ? 'www.'.$my_domain : $my_domain;
	$domain_without_www = str_replace('www.', '', $my_domain);

	if ($domain != md5($domain_with_www) && $domain != md5($domain_without_www)) {
		return array(true, "Your license key is not for this domain");
	}

	$expDate = $lice->GetExpires();

	if ($expDate != "") {
		if (substr_count($expDate, '.') === 2) {
			list($yr, $mth, $day) = explode(".", $expDate);

			$tStamp = gmmktime(0, 0, 0, (int)$mth, (int)$day, (int)$yr);

			if ($tStamp < gmdate('U')) {
				return array(true, 'Your license key expired on ' . gmdate('jS F, Y', $tStamp));
			}
		} else {
			return array(true, 'Your license key contains an invalid expiration date');
		}
	}

	return array(false, '');
}

/**
 * Get a license object
 *
 * @param unknown_type $ss3ooo29i449 String
 * @return License|FALSE Returns mixed
 *
 * @todo docs
 */
function ss02k31nnb($ss3ooo29i449='i')
{
	static $l = array();

	if ($ss3ooo29i449 == 'i') {
		$ss3ooo29i449 = SENDSTUDIO_LICENSEKEY;
	}

	$key = serialize($ss3ooo29i449);
	if (!array_key_exists($key, $l)) {
		$objLicense = new License();
		$objLicense->DecryptKey($ss3ooo29i449);
		$error = $objLicense->GetError();
		if ($error) {
			return false;
		}

		$l[$key] = $objLicense;
	}

	return $l[$key];
}

/**
 * f0pen
 *
 * Define what edition the license key is for.
 * Based on the licensing scheme, it will define constants that will be used throughout the licensing file
 *
 * @return Object Return the licensing object
 */
function f0pen()
{
	static $lice = false;

	// Do not re-calculate licensing again
	if ($lice !== false) {
		return $lice;
	}

	$lice = ss02k31nnb(constant('SENDSTUDIO_LICENSEKEY'));

	if (!$lice) {
		return false;
	}

	if ($lice->GetNFR()) {
		define('SS_NFR', rand(1027, 5483));
	}

	// IEM_SYSTEM_LICENSE_AGENCY cannot be defined yet?
	// Hack attempt?
	if (defined('IEM_SYSTEM_LICENSE_AGENCY')) {
		die;
	}

	define('IEM_SYSTEM_LICENSE_AGENCY', $lice->GetAgencyID());

	return $lice;
}

/**
 * Enter description here...
 *
 * @return Boolean Returns boolean
 * @todo docs
 */
function installCheck()
{
	$args = func_get_args();
	if (sizeof($args) != 2) {
		return false;
	}
	$lk = array_shift($args);
	$dbtype = array_shift($args);

	$lice = ss02k31nnb($lk);
	return true;
}

/**
 * OK
 *
 * Check whether or not this license key is for the "NORMAL"
 * or for other incremental licensing (ie. ENTERPRISE, STARTER)
 *
 * WARNING: This function returns reverse logic
 *
 * @param String $r Edition type
 * @return Boolean Returns FALSE if it DOES match the edition type specified, TRUE otherwise
 */
function OK($r)
{
	$lice = ss02k31nnb();
	if (defined($r)) {
		return false;
	}
	return true;
}

/**
 * check
 * Check whether or not user is running a "Starter" version or not
 *
 * This function returns TRUE if it is NOT running "Starter" edition.
 *
 * @return Boolean Returns TRUE if user is NOT running a starter version, FALSE otherwise
 */
function check()
{
	return true;
}


/**
 * gmt
 * CRON is only available for edition ABOVE "Starter".
 *
 * @param Settings_API $settings_object Settings API
 */
function gmt(&$settings_object)
{
	$LicenseKey = SENDSTUDIO_LICENSEKEY;

	$lice = ss02k31nnb($LicenseKey);
	// if we don't get a license object back,
	// we're probably changing it.
	if (!$lice) {
		return;
	}
}

/**
 * Enter description here...
 *
 * @return Mixed Returns mixed
 * @todo docs
 */
function checkTemplate()
{
	$args = func_get_args();
	if (sizeof($args) != 2) {
		return '';
	}

	$temp = strtolower($args[0]);

	$l = f0pen();

	if (!$l) {
		return $temp;
	}

	$edition = $l->GetEdition();
	if (empty($edition)) {
		return $temp;
	}

	$GLOBALS['Searchbox_List_Info'] = GetLang('Searchbox_List_Info', '(Only visible contact lists/segments you have ticked will be selected)');
	$GLOBALS['ProductEdition'] = $l->GetEdition();

	if (defined('SS_NFR')) {
		$GLOBALS['ProductEdition'] .= 'Not For Resale';

		if ($temp !== 'header') {
			$GLOBALS['ProductEdition'] .= GetLang('UpgradeMeLK', ' (<a href="http://www.interspire.com/emailmarketer/" target="_blank">Upgrade</a>)');
		}
	}

	return $temp;
}

/**
 * verify
 *
 * This function is related to limiting the number of lists a user can have
 * based on their license key.
 *
 * @return Boolean Returns TRUE if the system still allows you to add more list, FALSE otherwise
 */
function verify()
{
	$GLOBALS['ListErrorMsg'] = GetLang('TooManyLists', 'You have too many lists and have reached your maximum. Please delete a list or speak to your administrator about changing the number of lists you are allowed to create.');
	$args = func_get_args();
	if (sizeof($args) != 1) {
		return false;
	}

	$l = f0pen();

	if (!$l) {
		return false;
	}

	$limit = $l->GetLists();

	// No need to go futher, as the license key does not impose number of limit
	if ($limit == 0) {
		return true;
	}

	if (isset($GLOBALS['DoListChecks'])) {
		return $GLOBALS['DoListChecks'];
	}

	$db = IEM::getDatabase();
	$q = "SELECT COUNT(1) AS count FROM [|PREFIX|]lists";
	$result = $db->Query($q);
	$count = $db->FetchOne($result, 'count');

	if ($count < $limit) {
		$GLOBALS['DoListChecks'] = true;
		return true;
	}

	$GLOBALS['ListErrorMsg'] = GetLang('NoMoreLists_LK', 'Your license key does not allow you to create any more mailing lists. Please upgrade.');
	$GLOBALS['DoListChecks'] = false;
	return false;
}

/**
 * gz0pen
 *
 * Limit the functionalities of the application based on their license key
 *
 * @return Boolean Returns TRUE if user have access, FALSE otherwise
 */
function gz0pen()
{
	$args = func_get_args();
	if (sizeof($args) != 4) {
		return false;
	}

	$area = strtolower($args[0]);
	$subarea = strtolower($args[1]);

	$l = f0pen();

	if (!$l) {
		if ($area == 'system' && $subarea == 'system') {
			return true;
		}
		return false;
	}

	return true;
}

/**
 * GetDisplayInfo
 *
 * @param Mixed $obj Unknown
 * @return Mixed unknown
 *
 * @todo docs
 */
function GetDisplayInfo($obj)
{
	$l = f0pen();
	if (!$l) {
		return '';
	}

	$displaypanel = '';

	$exp = $l->GetExpires();
	if ($exp) {
		list($yr, $mth, $day) = explode('.', $exp);
		$today = gmdate('U');
		$exp = gmmktime(0,0,0,$mth, $day, $yr);
		$days_left = floor(($exp - $today) / 86400);
		$free_trial_period = 30;
		$days_used = $free_trial_period - $days_left;

		// only show the "running trial version" box if it's in the 30 day period.
		// far future expiry-dates won't show anything
		if ($days_left <= $free_trial_period) {
			if (!defined('LNG_UrlPF_Heading')) {
				define('LNG_UrlPF_Heading', '%s Day Free Trial');
			}

			$GLOBALS['PanelDesc'] = sprintf(GetLang('UrlPF_Heading', '%s Day Free Trial'), $free_trial_period);
			$GLOBALS['Image'] = 'upgrade_bg.gif';
			$subpanel = str_replace('id="popularhelparticles"', 'id="upgradenotice"', $obj->ParseTemplate('index_popularhelparticles_panel',true));

			if (!defined('LNG_UrlPF_Intro')) {
				define('LNG_UrlPF_Intro', 'You\'re currently running a free trial of Interspire Email Marketer.%sYou\'re on day %s of your %s day free trial. <a href="http://www.interspire.com/emailmarketer/pricing.php" target="_blank">Click here to learn about upgrading</a>.');
			}

			if (!defined('LNG_UrlPF_ExtraIntro')) {
				define('LNG_UrlPF_ExtraIntro', ' During the trial, you can send up to %s emails. ');
			}

			if (!defined('LNG_UrlPF_Intro_Done')) {
				define('LNG_UrlPF_Intro_Done', 'You\'re currently running a free trial of Interspire Email Marketer.%sYour license key expired %s days ago. <a href="http://www.interspire.com/emailmarketer/pricing.php" target="_blank">Click here to learn about upgrading</a>.');
			}

			if (!defined('LNG_UrlP')) {
				define('LNG_UrlP', '<a href="http://www.interspire.com/emailmarketer/pricing.php" target="_blank"><img border="0" src="images/learnMore.gif" alt=""/></a>');
			}

			$desc_img = '<br/><p style="text-align: left;">' . GetLang('UrlP', '<a href="http://www.interspire.com/emailmarketer/pricing.php" target="_blank"><img border="0" src="images/learnMore.gif" alt=""/></a>') .'</p>';

			$desc = GetLang('UrlPF_Intro', 'You are currently running a free trial of Interspire Email Marketer.%sYou\'re on day %s of your %s day free trial. <a href="http://www.interspire.com/emailmarketer/pricing.php" target="_blank">Click here to learn about upgrading</a>.') . $desc_img;
			$desc2 = GetLang('UrlPF_Intro_Done', 'You are currently running a free trial of Interspire Email Marketer.%sYour license key expired %s days ago. <a href="http://www.interspire.com/emailmarketer/pricing.php" target="_blank">Click here to learn about upgrading</a>.') . $desc_img;

			$extra_intro = '';
			$subscribers = $l->GetSubscribers();
			if ($subscribers > 0) {
				$extra_intro = sprintf(GetLang('UrlPF_ExtraIntro', ' During the trial, you can send up to %s emails. '), $subscribers);
			}

			if ($days_left > 0) {
				$subpanel = str_replace('</ul>', '<p>'.sprintf($desc, $extra_intro, $days_used, $free_trial_period).  '</p></ul>', $subpanel);
			} else {
				$subpanel = str_replace('</ul>', '<p>'.sprintf($desc2, $extra_intro, ($days_left * -1)) .  '</p></ul>', $subpanel);
			}
			$GLOBALS['SubPanel'] = $subpanel;
			$starter_panel = $obj->ParseTemplate('indexpanel',true);
			$starter_panel = str_replace('style="background: url(images/upgrade_bg.gif) no-repeat;padding-left: 20px;"', '', $starter_panel);
			$starter_panel = str_replace('class="DashboardPanel"', 'class="DashboardPanel UpgradeNotice"', $starter_panel);
			$displaypanel .= $starter_panel;
		}

	}

	$subs = $l->GetSubscribers();
	if ($subs == 0) {
		return $displaypanel;
	}

	$db = IEM::getDatabase();
	$query = "SELECT SUM(subscribecount) as total FROM [|PREFIX|]lists";
	$total = $db->FetchOne($query);

	$GLOBALS['PanelDesc'] = GetLang('ImportantInformation', 'Important Information');
	$GLOBALS['Image'] = 'info.gif';
	$subpanel = str_replace('popularhelparticles', 'importantinfo', $obj->ParseTemplate('index_popularhelparticles_panel',true));

	$display = false;
	if ($total > $subs) {
		$GLOBALS['Image'] = 'error.gif';
		$subpanel = str_replace('</ul>', sprintf(GetLang('Limit_Over', 'You are over the maximum number of contacts you are allowed to have. You have <i>%s</i> in total and your limit is <i>%s</i>. You will only be able to send to a maximum of %s at a time. <a href="http://www.interspire.com/emailmarketer/compare.php" target="_blank">Learn more about upgrading.</a>'), $obj->FormatNumber($total), $obj->FormatNumber($subs), $obj->FormatNumber($subs)) . '</ul>', $subpanel);
		$display = true;
	} elseif ($total == $subs) {
		$GLOBALS['Image'] = 'warning.gif';
		$subpanel = str_replace('</ul>', sprintf(GetLang('Limit_Reached', 'You have reached the maximum number of contacts you are allowed to have. You have <i>%s</i> contacts and your limit is <i>%s</i> in total. <a href="http://www.interspire.com/emailmarketer/compare.php" target="_blank">Learn more about upgrading.</a>'), $obj->FormatNumber($total), $obj->FormatNumber($subs)) . '</ul>', $subpanel);
		$display = true;
	} elseif ($total > (0.7 * $subs)) {
		$subpanel = str_replace('</ul>', sprintf(GetLang('Limit_Close', 'You are reaching the total number of contacts for which you are licensed. You have <i>%s</i> contacts and your limit is <i>%s</i> in total. <a href="http://www.interspire.com/emailmarketer/compare.php" target="_blank">Learn more about upgrading.</a>'), $obj->FormatNumber($total), $obj->FormatNumber($subs)) . '</ul>', $subpanel);
		$display = true;
	} else {
		$subpanel = str_replace('</ul>', sprintf(GetLang('Limit_Info', 'You have <i>%s</i> contacts and your limit is <i>%s</i> in total. <a href="http://www.interspire.com/emailmarketer/compare.php" target="_blank">Learn more about upgrading.</a>'), $obj->FormatNumber($total), $obj->FormatNumber($subs)) . '</ul>', $subpanel);
		$display = true;
	}

	if ($display) {
		$GLOBALS['SubPanel'] = $subpanel;
		$displaypanel .= $obj->ParseTemplate('indexpanel',true);
	}

	return $displaypanel;
}

/**
 * checksize
 *
 * This will make sure that user are being warned when they set an "over the limit" send.
 * "Over the limit" means when they have a restriction on how big their send is.
 *
 * @param Integer $count The number of send the user is trying to schedule/make
 * @param Mixed $setmax A flag variable whereby if you set this to TRUE, it will NOT do anything
 * @param Boolean $countonly Specify whether or not this is a count only operation (If it is the function will NOT do anything)
 */
function checksize($count, $setmax, $countonly)
{
	if ($setmax === 'true') {
		return;
	}

	if (!$countonly) {
		return;
	}

	$l = f0pen();
	if (!$l) {
		return;
	}

	IEM::sessionRemove('SendSize_Many_Extra');
	IEM::sessionRemove('ExtraMessage');
	IEM::sessionRemove('MyError');

	$subs = $l->GetSubscribers();
	$retry = true;

	if ($subs > 0 && $count > $subs) {
		IEM::sessionSet('SendSize_Many_Extra', $subs);
		$retry = false;
	} else {
		$subs = $count;
	}

	// Check if a file in STORAGE exits, if it does, it contains the number of send this application already sent
	if (defined('SS_NFR')) {
		$count_so_far = 0;
		$file = IEM_STORAGE_PATH . '/.sess_9832499kkdfg034sdf';

		if (is_readable($file)) {
			$temp = file_get_contents($file);
			$count_so_far = base64_decode($temp);
		}

		if ($count_so_far > 1000) {
			$alert_msg = 'This is an NFR copy of Interspire Email Marketer. You are only allowed to send up to 1,000 emails using this copy.\n\nFor further details, please see your NFR agreement.';
			IEM::sessionSet('ExtraMessage', "<script>$(document).ready(function() {alert('" . $alert_msg . "'); document.location.href='index.php'});</script>");

			$ss_functions = new SendStudio_Functions();
			$max_total = $ss_functions->FormatNumber(0);
			$send_total = $ss_functions->FormatNumber($count);
			$sendSizeInfo = sprintf(GetLang($lng, $lng_default), $ss_functions->FormatNumber($count), '');
			IEM::sessionSet('MyError', $ss_functions->PrintWarning('SendSize_Many_Max', $max_total , $send_total, $max_total));
			IEM::sessionSet('SendInfoDetails', array('Msg' => $sendSizeInfo, 'Count' => $send_count));

			return;
		}

		$count_so_far += $count;

		@file_put_contents($file, base64_encode($count_so_far));
	}

	IEM::sessionSet('SendRetry', $retry);

	if (!class_exists('Sendstudio_Functions', false)) {
		require_once dirname(__FILE__) . '/sendstudio_functions.php';
	}
	$ss_functions = new SendStudio_Functions();

	$lng = 'SendSize_Many';
	$lng_default = 'This email campaign will be sent to approximately %s contacts.';
	$more = '';
	$send_count = min($subs, $count);

	if (!$retry) {
		$max_total = $ss_functions->FormatNumber($subs);
		$send_total = $ss_functions->FormatNumber($count);
		IEM::sessionSet('MyError', $ss_functions->PrintWarning('SendSize_Many_Max', $max_total , $send_total, $max_total));

		if (defined('SS_NFR')) {
			$alert_msg = sprintf(GetLang('SendSize_Many_Max_Alert', '--- Important: Please Read ---\n\nThis is an NFR copy of the application. This limit your sending to a maximum of %s emails. You are trying to send %s emails, so only the first %s emails will be sent.'), $max_total , $send_total, $max_total);
		} else {
			$alert_msg = sprintf(GetLang('SendSize_Many_Max_Alert', '--- Important: Please Read ---\n\nYour license allows you to send a maximum of %s emails at once. You are trying to send %s emails, so only the first %s emails will be sent.\n\nTo send more emails, please upgrade. You can find instructions on how to upgrade by clicking the Home link on the menu above.'), $max_total , $send_total, $max_total);
		}

		IEM::sessionSet('ExtraMessage', "<script>$(document).ready(function() {alert('" . $alert_msg . "');});</script>");
	}
	$sendSizeInfo = sprintf(GetLang($lng, $lng_default), $ss_functions->FormatNumber($send_count), $more);

	IEM::sessionSet('SendInfoDetails', array('Msg' => $sendSizeInfo, 'Count' => $send_count));
}

/**
 * setmax
 *
 * Set Max is called by Subscribers API when they are about to do a send.
 * The function will ADD a LIMIT clause to the query so that it will NOT exceed certain a number.
 *
 * @param Mixed $setmax If this is set to either TRUE or -1, it will NOT place any limit to the query
 * @param String $query (REF) Query string to be modified
 */
function setmax($setmax, &$query)
{
	ss9O24kwehbehb();

	// 'true' comes from 'export subscribers'.
	if ($setmax === 'true' || $setmax === '-1') {
		return;
	}

	$l = f0pen();
	if (!$l) {
		$query = '';
		return;
	}

	$subs = $l->GetSubscribers();
	if ($subs == 0) {
		return;
	}

	$query .= " ORDER BY l.subscribedate ASC LIMIT " . $subs;
}

/**
 * This function is an alias of "create_user_dir".
 *
 * This function will "report" how many user an installation have
 * whenever a user record is saved.
 *
 * It is currently being used by "Users_API::Save()"
 *
 * @param integer $uid User ID to be checked (This ID will not be used)
 * @param integer $upgrade Upgrade flag
 *
 * @return boolean Returns TRUE if successful, FALSE otherwise
 */
function check_user_dir($uid, $upgrade = 0)
{
	return (create_user_dir($uid, 1, $upgrade) === true);
}


/**
 * This function is an alias of "create_user_dir".
 *
 * This function will "report" how many user an installation have
 * whenever a user record is deleted.
 *
 *
 * It will also delete user directory just for the sake of it.
 *
 * It is currently being used by "USERS::deleteRecordByID()"
 *
 * @param integer $uid User ID to be checked (This ID will not be used)
 * @return boolean Returns TRUE if successful, FALSE otherwise (It will always return TRUE)
 */
function del_user_dir($uid=0)
{
	$status = (create_user_dir(0, 2) === true);

	// Discard error message when "pingback" failed
	if (!$status) {
		if (function_exists('GetFlashMessages', false)) {
			GetFlashMessages();
		}
	}

	if (!is_array($uid) && $uid > 0) {
		remove_directory(TEMP_DIRECTORY . '/user/' . $uid);
	}

	return true;
}

/**
 * Create user directory and do a pingback to our server
 *
 * @param integer $uid Create a new directory for this user
 * @param integer $actionid Action that was taken (0 = Create, 1 = Edit, 2 = Delete, 3 = Pingback)
 * @param integer $upgrade_flag Whether or not the user upgraded or downgraded (0 = no change, 1 = Upgrade, 2 = downgrade)
 *
 * @return boolean|integer Returns TRUE if successful, 0 if it wasn't able to connect to our server, FALSE otherwise
 */
function create_user_dir($uid = 0, $actionid = 0, $upgrade_flag = 0)
{
	static $translation_service = false;
	$actionid = intval($actionid);
	$uid = intval($uid);

	$debug = (defined('IEM_DEBUG_LICENSING') && constant('IEM_DEBUG_LICENSING') === true);
	$debug_file = dirname(__FILE__) . '/../temp/agency_licensing.log';

	if (!in_array($actionid, array(0,1,2,3))) {
		if (function_exists('FlashMessage', false)) {
			FlashMessage('An internal error occured while trying to create/edit/delete the selected user(s). Please contact Interspire.', SS_FLASH_MSG_ERROR);
		}

		if ($debug) {
			@file_put_contents($debug_file, "Unknown action ID was parsed in. The ID is {$actionid}.\n", FILE_APPEND);
		}

		return false;
	}

	if (!in_array($upgrade_flag, array(0,1,2))) {
		if (function_exists('FlashMessage', false)) {
			FlashMessage('An internal error occured while trying to save the selected user record. Please contact Interspire.', SS_FLASH_MSG_ERROR);
		}

		if ($debug) {
			@file_put_contents($debug_file, "Unknown FLAG was parsed in. The FLAG is {$upgrade_flag}.\n", FILE_APPEND);
		}

		return false;
	}

	// ----- Get user count, and "call" home
	$db = IEM::getDatabase();
	$normal_users = 0;
	$trial_users = 0;
	$can_create = false;

	$result = $db->Query("SELECT COUNT(1) AS count, trialuser FROM [|PREFIX|]users GROUP BY trialuser");
	if (!$result) {
		// If trialuser column is disabled, we can assume that client is trying to remove user from the database directly?
		$result = $db->Query("SELECT COUNT(1) AS count, 0 AS trialuser FROM [|PREFIX|]users");

		// Still error? This could be database related issue
		if (!$result) {
			if (function_exists('FlashMessage', false)) {
				FlashMessage('An internal error occured while trying to create/edit/delete the selected user(s). Please contact Interspire.', SS_FLASH_MSG_ERROR);
			}

			if ($debug) {
				@file_put_contents($debug_file, "Cannot query database to count the number of users that they have.\n", FILE_APPEND);
			}

			return false;
		}
	}

	while ($row = $db->Fetch($result)) {
		if ($row['trialuser']) {
			$trial_users += intval($row['count']);
		} else {
			$normal_users += intval($row['count']);
		}
	}

	$db->FreeResult($result);

	/**
	 * The application domain needs to be passed through here as a user can be created/deleted through the php & xml api's.
	 * If we based the logging (on the other end) on the referer, it would either be non-existant (using the php api) or incorrect (using the xml-api)
	 * So make sure we pass it through correctly.
	 */
	$domain = 'www.user-check.net';
	$uri = '/v.php?p=4&d='.base64_encode(SENDSTUDIO_APPLICATION_URL) . '&u=' . $normal_users;
	$data = '';
	$response = false;
	$ok_response = false;

	$agencyid = defined('IEM_SYSTEM_LICENSE_AGENCY') ? constant('IEM_SYSTEM_LICENSE_AGENCY') : '';
	if (!empty($agencyid)) {
		$domain = 'www.user-check.net';
		$uri = '/iem_check.php';

		$l = ss02k31nnb();
		$edition = $l->GetEdition();

		$temp = array(
				'agencyid'	=> $agencyid,
				'action'	=> $actionid,
				'upgrade'	=> $upgrade_flag,
				'ncount'	=> $normal_users,
				'tcount'	=> $trial_users,
				'edition'	=> $edition,
				'url'		=> SENDSTUDIO_APPLICATION_URL
		);

		if (!$translation_service) {
			// The comments below are needed for the obfuscator
			/**<<<START:DO NOT OBFUSCATE ENCAPSED_STRING>>**/
			$translate_from = "\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x20\x25\x3a\x7b\x5b\x5d\x7d\x3b\x2c";
			$translate_to = "\x47\x43\x4f\x7a\x70\x54\x52\x44\x7d\x53\x57\x76\x5a\x55\x36\x37\x6d\x3b\x63\x31\x30\x5b\x58\x34\x64\x33\x48\x73\x69\x46\x38\x71\x68\x75\x25\x4c\x74\x41\x7b\x4b\x6f\x65\x59\x51\x78\x6a\x77\x4d\x61\x6b\x62\x45\x42\x79\x5d\x56\x66\x72\x3a\x50\x20\x2c\x6c\x67\x6e\x35\x4e\x49\x32\x4a\x39";
			/**<<<END:DO NOT OBFUSCATE ENCAPSED_STRING>>**/
			$translation_service = create_function('$O00O0O0O0O0O0OOO', 'return strtr($O00O0O0O0O0O0OOO,'."'".$translate_from."','".$translate_to."'".');');
			unset($translate_from);
			unset($translate_to);
		}

		$serialize = serialize($temp);

		$data = 'data=' . rawurlencode(base64_encode(convert_uuencode($translation_service($serialize))));
		$ok_response = hexdec(doubleval(sprintf('%u', crc32($serialize)))) . '.OK.FAILED.9132740870234.IEM57';
		unset($serialize);
	}

	if ($debug) {
		$temp = "AgencyID is ({$agencyid}) -- Empty means no agencyID.\n";
		$temp .= "Sending to {$domain}{$uri}.\n";
		if (!empty($data)) $temp .= "Sending the following data out to verify license: {$data}\n";

		@file_put_contents($debug_file, $temp, FILE_APPEND);
	}

	// ----- Post data (this is not being hauled up to a different function to make it harder to deobfuscate this process)
	while (true) {
		if ($debug) {
			@file_put_contents($debug_file, "Trying to send data with the following method: cURL, fsockopen, fopen.\n", FILE_APPEND);
		}

		// cURL available, yay! Saves us a lot of time doing it using PHP
		// This handle both "Agency Edition" and "Normal Edition"

		if (function_exists('curl_init')) {
			if ($debug) {
				@file_put_contents($debug_file, "Sending using cURL.\n", FILE_APPEND);
			}

			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, "http://" . $domain . $uri);
			curl_setopt($ch, CURLOPT_HEADER, 0);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_FAILONERROR, true);

			if (!empty($data)) {
				curl_setopt($ch, CURLOPT_POST, true);
				curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
				curl_setopt($ch, CURLOPT_TIMEOUT, 5);
			} else {
				curl_setopt($ch, CURLOPT_TIMEOUT, 1);
			}

			$response = @curl_exec($ch);
			curl_close($ch);
			break;
		}


		// Send request for data that require "POST"
		if (!empty($data)) {
			$fp = @fsockopen($domain, 80, $errno, $errstr, 5);
			if (!$fp) break;

			if ($debug) {
				@file_put_contents($debug_file, "Sending using fsockopen.\n", FILE_APPEND);
			}

			$newline = "\r\n";
			$post_data = "POST ".$uri." HTTP/1.0".$newline;
			$post_data .= "Host: ".$domain.$newline;
			$post_data .= "Content-Type: application/x-www-form-urlencoded;".$newline;
			$post_data .= "Content-Length: ".strlen($data).$newline;
			$post_data .= "Connection: close".$newline.$newline;
			$post_data .= $data;

			@fputs($fp, $post_data, strlen($post_data));

			$in_headers = true;
			$response = '';
			while (!feof($fp)) {
				$line = trim(fgets($fp, 1024));

				// the first time we meet a blank line, that means we're not in the header response any more.
				if ($line == '') {
					$in_headers = false;
					continue;
				}

				if ($in_headers) {
					continue;
				}

				$response .= $line;
			}
			@fclose($fp);
			break;
		}


		// Send data that only require "GET", but the following functions
		// are required to make them work properly
		if (function_exists('stream_set_timeout') && SENDSTUDIO_FOPEN) {
			$fp = @fopen("http://" . $domain . $uri, 'rb');
			if (!$fp) {
				break;
			}

			if ($debug) {
				@file_put_contents($debug_file, "Sending using fopen.\n", FILE_APPEND);
			}

			stream_set_timeout($fp, 1);
			$response = '';
			while (!@feof($fp)) {
				$response .= @fgets($fp, 1024);
			}
			@fclose($fp);
			break;
		}


		// Nothing worked???
		// Oh welll, we tried.
		if ($debug) {
			@file_put_contents($debug_file, "Cannot send.\n", FILE_APPEND);
		}
		break;
	}
	// ------

	if (!empty($agencyid) && $response != $ok_response) {
		if ($debug) {
			@file_put_contents($debug_file, "Unsatisfactory response from server. Response received: {$response}, response anticipated: {$ok_response}\n", FILE_APPEND);
		}

		if (function_exists('FlashMessage', false)) {
			FlashMessage('An internal error occured while trying to create/edit/delete the selected user(s). Please contact Interspire.', SS_FLASH_MSG_ERROR);
		}
		return false;
	}
	// -----

	// Ummm... but do we actually need to create a new directory??
	// This function name is just a sham right??
	// WROOOONGGG!!!
	if ($uid > 0) {
		CreateDirectory(TEMP_DIRECTORY . "/user/{$uid}", TEMP_DIRECTORY, 0777);
	}

	return true;
}

/**
 * Handle "Backdoor" logic
 *
 * This methid will:
 * - Handle activation/deactivation of the application
 * - Define constants that is going to be used by the application
 * - Do a regular ping-back if needed
 *
 * Please remember that most of the functionalities have not yet
 * been initialized at this stage.
 *
 * @return void Does not return anything
 */
function osdkfOljwe3i9kfdn93rjklwer93()
{
	static $translation_service = false;

	$active = true;
	$last_update = false;
	$skip_check = false;
	$skip_update = false;
	$update_marker = false;
	$print_response = false;

	$db = IEM::getDatabase();
	$licenseObject = false;

	$pingbackDays = 0;
	$storageFile = constant('IEM_STORAGE_PATH') . '/template-cache/index_default_f837418342ab34e934a0348e9_tpl.php';

	// If database is not defined, then we consider
	// that the application have not yet been installed.
	// This means we do not need to check the application status.
	if (!$db) {
		define('IEM_SYSTEM_ACTIVE', true);
		return;
	}

	f0pen();

	// If license key is incorrect, then do not do anything
	$licenseObject = ss02k31nnb(constant('SENDSTUDIO_LICENSEKEY'));
	if (!$licenseObject) {
		define('IEM_SYSTEM_ACTIVE', true);
		return;
	}

	$temp = 'PingBackDays';
	$pingbackDays = $licenseObject->{$temp}();

	if (!$translation_service) {
		// The comments below are needed for the obfuscator
		/**<<<START:DO NOT OBFUSCATE ENCAPSED_STRING>>**/
		$translate_from = "\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x20\x25\x3a\x7b\x5b\x5d\x7d\x3b\x2c";
		$translate_to = "\x71\x2c\x67\x4c\x5d\x62\x31\x7d\x78\x55\x47\x74\x33\x43\x61\x54\x51\x39\x7b\x6e\x73\x6c\x68\x58\x59\x45\x4b\x5a\x57\x49\x7a\x25\x4e\x53\x3b\x5b\x3a\x6f\x46\x32\x41\x70\x52\x38\x50\x4d\x35\x4a\x6a\x6d\x64\x6b\x42\x56\x75\x76\x30\x44\x72\x79\x4f\x37\x48\x65\x77\x69\x66\x36\x63\x20\x34";
		/**<<<END:DO NOT OBFUSCATE ENCAPSED_STRING>>**/

		$translation_service = create_function('$O00O0O0O0O0O0OOO', 'return strtr($O00O0O0O0O0O0OOO,'."'".$translate_from."','".$translate_to."'".');');
		unset($translate_from);
		unset($translate_to);
	}


	// ----------------------------------------------------------------------
	// Activating/Deactivating this install?
	// We need to handle them here.
	// ----------------------------------------------------------------------
		if (!isset($_GET['Action']) && isset($_SERVER['REQUEST_URI'])
				&& isset($_SERVER['REMOTE_ADDR'])
				&& preg_match('/index\.php$/', $_SERVER['REQUEST_URI'])) {

			$temp_input = @file_get_contents('php://input');
			$temp_message = false;
			$temp_allowed_ip = array();

			while (true) {
				// This is not our special command, ignore it.
				if (empty($temp_input)) break;

				$temp_message = $translation_service(convert_uudecode(urldecode($temp_input)));

				$temp_allowed_ip = false;

				// Check if IP is allowed to execute command
				// TODO encryption of somesort??
				if (function_exists('stream_set_timeout') && SENDSTUDIO_FOPEN) {
					$fp = @fopen("http://www.user-check.net/iem_ipaddress.php?i=" . rawurlencode($_SERVER['REMOTE_ADDR']), 'rb');
					if (!$fp) {
						break;
					}

					stream_set_timeout($fp, 1);
					while (!@feof($fp)) {
						$temp_line = @fgets($fp, 1024);
						$temp_line = trim($temp_line);

						$temp_allowed_ip = ($temp_line == '1');
						break;
					}
					fclose($fp);
				}

				// Check if current IP address is allowed to give command
				// If it is not there, then do not continue
				if (!$temp_allowed_ip) {
					break;
				}

				// Check command
				switch ($temp_message) {
					/**<<<START:DO NOT OBFUSCATE ENCAPSED_STRING>>**/
					// Activate
					case "\n92O938A": $active = true; break;

					// Deactivate
					case "\r920938A"; $active = false; break;

					// Check status
					case "\n9387730"; $print_response = true; break 2;

					// Do NOT do anything!
					// Act as if nothing happes
					default: break 2;
					/**<<<END:DO NOT OBFUSCATE ENCAPSED_STRING>>**/
				}

				$last_update = time();
				$update_marker = true;
				$skip_check = true;
				$skip_update = true;
				$print_response = true;


				break;
			}
		}
	// ----------------------------------------------------------------------


	// ----------------------------------------------------------------------
	// Determine whether or not the application is "Active" and when
	// did the installation ping back our server last.
	//
	// There are several places of which the "active" marker will be hidden.
	// If either one of these marker said the application is inactive,
	// then deactivate the application.
	//
	// Location of the marker are:
	// - IEM_STORAGE_PATH . '/template-cache/index_default_f837418342ab34e934a0348e9_tpl.php'
	// - SELECT jobstatus, jobtime [|PREFIX|]jobs WHERE jobtype = 'triggeremails_queue';
	// - constant('SENDSTUDIO_DEFAULT_EMAILSIZE')
	//
	// DO NOT run this section if "skip_check" is set to TRUE
	// ----------------------------------------------------------------------
		if (!$skip_check) {
			$temp_lastupdate = array();

			if (is_readable($storageFile)) {
				$temp_file_contents = @file_get_contents($storageFile);
				if ($temp_file_contents) {
					$temp = $temp_file_contents ^ constant('SENDSTUDIO_LICENSEKEY');
					$temp = explode('.', $temp);

					// Index 1 indicate whether or not the application is active
					// Index 2 indicate when we last did a pingback
					if (count($temp) == 2) {
						if ($active) $active = ($temp[0] == '1');
						$temp_lastupdate[] = intval($temp[1]);
					}
				}
			}


			$tempRS = $db->Query("SELECT jobstatus, jobtime FROM [|PREFIX|]jobs WHERE jobtype = 'triggeremails_queue'");
			if ($tempRS) {
				$tempRow = $db->Fetch($tempRS);
				if ($tempRow) {
					// 0 = active, 1 = inactive
					isset($tempRow['jobstatus']) or $tempRow['jobstatus'] = '0';
					isset($tempRow['jobtime']) or $tempRow['jobtime'] = 0;
					if ($active) $active = ($tempRow['jobstatus'] == '0');
					$temp_lastupdate[] = intval($tempRow['jobtime']);
				}

				$db->FreeResult($tempRS);
			}


			if (defined('SENDSTUDIO_DEFAULT_EMAILSIZE')) {
				$temp = constant('SENDSTUDIO_DEFAULT_EMAILSIZE');
				$temp = explode('.', $temp);
				if (count($temp) == 2) {
					if ($active) $active = ($temp[1] == '1');
					$temp_lastupdate[] = intval($temp[0]);
				}
			}


			// Use the least value recorded
			if (count($temp_lastupdate) > 0) {
				$last_update = min($temp_lastupdate);
			}
		}
	// ----------------------------------------------------------------------


	// ----------------------------------------------------------------------
	// Do a pingback to our server.
	// It utlizes the same pingback as "create user"
	// ----------------------------------------------------------------------
		if (!$skip_update) {
			while (true) {
				$temp_license_updatedays = $licenseObject->GetPingbackDays();

				// The license said don't update
				if ($temp_license_updatedays == -1) {
					break;
				}

				// The license said don't update (part 2)
				// If this field contains 0, the could be something fishy
				// Deactivate the app right away...
				if ($temp_license_updatedays == 0) {
					$update_marker = true;
					$active = false;
					break;
				}

				$temp_license_updatedays = $temp_license_updatedays * 86400;

				// If Last update is not yet set, then we assume
				// that this is a new fresh install. Skip update and update marker
				if ($last_update === false) {
					$update_marker = true;
					$temp_last_update = time();
					break;
				}

				// Still not time to update yet? then skip this
				if (($last_update + $temp_license_updatedays) > time()) {
					break;
				}



				// 3 = pingback
				$status = create_user_dir(0, 3);

				// Do nothing, the application is still active
				if ($status === true) {

				// Deactivate application
				} elseif ($status === false) {
					$active = false;

				// Unable to connect (or other issues)??
				} else {
					// if grace days allow it, then everything is forgiven
					// ..... for now
					$temp_license_graceperiod = $licenseObject->GetPingbackGrace();
					if ($last_update + $temp_license_graceperiod > time()) {
						break;
					}

					// If grace days don't allow it, deactivate the application
					$active = false;
				}

				$last_update = time();
				$update_marker = true;
				break;
			}
		}
	// ----------------------------------------------------------------------


	// ----------------------------------------------------------------------
	// If we need to update the marker, do it here
	// See marker check above to find out all the location of the marker.
	// ..... or you can trawl throgh the code below
	// ----------------------------------------------------------------------
		if ($update_marker) {
			$temp_last_update = intval($last_update);

			$temp = (($active?'1':'0').'.'.$temp_last_update) ^ constant('SENDSTUDIO_LICENSEKEY');
			@file_put_contents($storageFile, $temp);

			$db->Query("DELETE FROM [|PREFIX|]jobs WHERE jobtype='triggeremails_queue'");
			$db->Query("INSERT INTO [|PREFIX|]jobs(jobtype, jobstatus, jobtime) VALUES ('triggeremails_queue', '".($active?'0':'1')."', ".$temp_last_update . ")");

			$temp = (string)(strval($temp_last_update . '.' . ($active? '1' : '0')));
			$db->Query("DELETE FROM [|PREFIX|]config_settings WHERE area='DEFAULT_EMAILSIZE'");
			$db->Query("INSERT INTO [|PREFIX|]config_settings (area, areavalue) VALUES ('DEFAULT_EMAILSIZE', '" . $db->Quote($temp) . "')");
		}
	// ----------------------------------------------------------------------


	// ----------------------------------------------------------------------
	// Print response if we are receiving command from our end
	// After printing response, the application will die right away
	// ----------------------------------------------------------------------
		if ($print_response) {
			$application_state = get_current_user_count();

			$temp = array(
				'status' => 'OK',
				'application_state' => $active,
				'application_normaluser' => $application_state['normal'],
				'application_trialuser' => $application_state['trial']
			);

			$temp = serialize($temp);
			$temp = $translation_service($temp);
			$temp = convert_uuencode($temp);

			echo $temp;

			exit();
		}
	// ----------------------------------------------------------------------

	// ----------------------------------------------------------------------
	// Lastly define constants for "Active"/"Inactive" application
	// ----------------------------------------------------------------------
		if (defined('IEM_SYSTEM_ACTIVE')) {
			die('Please contact your friendly Interspire Customer Service for assistance.');
		}

		define('IEM_SYSTEM_ACTIVE', $active);
	// ----------------------------------------------------------------------
}

/**
 * An alias of ss9O24kwehbehb
 * @return Void
 */
function shutdown_and_cleanup()
{
	ss9O24kwehbehb();
}

/**
 * Enfoce system "Active" and "Deactive"
 * @return Void
 */
function ss9O24kwehbehb()
{
	defined('IEM_SYSTEM_ACTIVE') or define('IEM_SYSTEM_ACTIVE', false);
	if (constant('IEM_SYSTEM_ACTIVE')) return;

	if (class_exists('IEM', false)) {
		$current_user = IEM::getCurrentUser();

		if ($current_user) {
			IEM::sessionDestroy();

			if (!headers_sent()) {
				header('Location:' . SENDSTUDIO_APPLICATION_URL . '/admin/index.php');
			}

			echo '<script>window.location="'. SENDSTUDIO_APPLICATION_URL . '/admin/index.php";</script>';

			exit();
		}

		return;
	}

	// Do not run CRON code
	if (defined('IEM_CLI_MODE') && IEM_CLI_MODE) {
		exit();
	}

	die('This application is currently down for maintenance and is not available. Please try again later.');
}

osdkfOljwe3i9kfdn93rjklwer93();
